feature-policy/reporting/xr-reporting.https.html:		                        navigator.xr.isSessionSupported('immersive-vr'),
permissions-policy/reporting/xr-report-only.https.html:		    let supported = await navigator.xr.isSessionSupported('immersive-vr');
permissions-policy/reporting/xr-reporting.https.html:		                        navigator.xr.isSessionSupported('immersive-vr'),
resources/chromium/webxr-test.js:		navigator.xr.test = new ChromeXRTest();
speculation-rules/prerender/resources/web-xr-immersive-vr-session.https.html:		      navigator.xr.requestSession('immersive-vr'),
speculation-rules/prerender/resources/web-xr-inline-session.https.html:		      navigator.xr.requestSession('inline'),
webxr/ar-module/idlharness.https.window.js:		    self.xrSession = await navigator.xr.requestSession('inline');
webxr/ar-module/xrDevice_isSessionSupported_immersive-ar.https.html:		        return navigator.xr.test.simulateDeviceConnection(IMMERSIVE_AR_DEVICE)
webxr/ar-module/xrDevice_isSessionSupported_immersive-ar.https.html:		            return navigator.xr.isSessionSupported('immersive-ar').then((supported) => {
webxr/ar-module/xrDevice_isSessionSupported_immersive-ar.https.html:		        return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/ar-module/xrDevice_isSessionSupported_immersive-ar.https.html:		            return navigator.xr.isSessionSupported('immersive-ar').then((supported) => {
webxr/ar-module/xrDevice_requestSession_immersive-ar.https.html:		        return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/ar-module/xrDevice_requestSession_immersive-ar.https.html:		            navigator.xr.test.simulateUserActivation(() => {
webxr/ar-module/xrDevice_requestSession_immersive-ar.https.html:		                navigator.xr.requestSession('immersive-ar', {})));
webxr/depth-sensing/depth_sensing_preferences.https.html:		        return navigator.xr.test.simulateDeviceConnection(IMMERSIVE_AR_DEVICE)
webxr/depth-sensing/depth_sensing_preferences.https.html:		            navigator.xr.test.simulateUserActivation(() => {
webxr/depth-sensing/depth_sensing_preferences.https.html:		              navigator.xr.requestSession('immersive-ar', sessionOptions)
webxr/dom-overlay/ar_dom_overlay.https.html:		  return navigator.xr.test.simulateDeviceConnection(fakeDeviceInitParams)
webxr/dom-overlay/ar_dom_overlay.https.html:		      navigator.xr.test.simulateUserActivation(() => {
webxr/dom-overlay/ar_dom_overlay.https.html:		            navigator.xr.requestSession('immersive-ar',
webxr/hit-test/idlharness.https.html:		      self.xrSession = await navigator.xr.requestSession("inline");
webxr/idlharness.https.window.js:		      XR: ['navigator.xr'],
webxr/idlharness.https.window.js:		    self.xrSession = await navigator.xr.requestSession('inline');
webxr/layers/xrSession_updateRenderState.https.html:		      navigator.xr.requestSession('inline', {}).then((otherSession) => {
webxr/layers/xrWebGLBinding_constructor.https.html:		  return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/layers/xrWebGLBinding_constructor.https.html:		      return navigator.xr.requestSession('inline')
webxr/layers/xrWebGLBinding_constructor.https.html:		        navigator.xr.test.simulateUserActivation(() => {
webxr/layers/xrWebGLBinding_constructor.https.html:		          navigator.xr.requestSession('immersive-vr')
webxr/light-estimation/xrFrame_getLightEstimate_oldSession.https.html:		        navigator.xr.test.simulateUserActivation( () => {
webxr/light-estimation/xrFrame_getLightEstimate_oldSession.https.html:		          navigator.xr.requestSession('immersive-ar', {'requiredFeatures': ['light-estimation']})
webxr/light-estimation/xrWebGLBinding_getReflectionCubeMap.https.html:		          navigator.xr.test.simulateUserActivation( () => {
webxr/light-estimation/xrWebGLBinding_getReflectionCubeMap.https.html:		            navigator.xr.requestSession('immersive-ar', { 'requiredFeatures': ['light-estimation'] })
webxr/navigator_xr_sameObject.https.html:		let testName = "Navigator.xr meets [SameObject] requirement";
webxr/navigator_xr_sameObject.https.html:		  let xr = navigator.xr;
webxr/navigator_xr_sameObject.https.html:		    // Make sure the navigator.xr object is the same on each frame.
webxr/navigator_xr_sameObject.https.html:		        assert_equals(navigator.xr, xr, "navigator.xr returns the same object");
webxr/navigator_xr_sameObject.https.html:		          assert_equals(navigator.xr, xr,
webxr/render_state_update.https.html:		    navigator.xr.test.simulateUserActivation(() => {
webxr/render_state_update.https.html:		      navigator.xr.requestSession('inline').then((tempSession) => {
webxr/resources/webxr_util.js:		    assert_implements(navigator.xr, 'missing navigator.xr - ensure test is run in a secure context.');
webxr/resources/webxr_util.js:		    if (!navigator.xr.test) {
webxr/resources/webxr_util.js:		    // means that the tests expect navigator.xr.test to be set. By rejecting now
webxr/resources/webxr_util.js:		    assert_implements(navigator.xr.test, 'missing navigator.xr.test, even after attempted load');
webxr/resources/webxr_util.js:		      await navigator.xr.test.disconnectAllDevices();
webxr/resources/webxr_util.js:		    return navigator.xr.test.simulateDeviceConnection(fakeDeviceInit)
webxr/resources/webxr_util.js:		                navigator.xr.test.simulateUserActivation(() => {
webxr/resources/webxr_util.js:		                  navigator.xr.requestSession(sessionMode, sessionInit || {})
webxr/resources/webxr_util.js:		    navigator.xr.test.simulateUserActivation(() => {
webxr/resources/webxr_util.js:		  callback(window.navigator.xr, 'navigator.xr');
webxr/resources/webxr_util.js:		  xr_debug = navigator.xr.test.Debug;
webxr/resources/webxr_util.js:		  navigator.xr.test = internals.xrTest;
webxr/webGLCanvasContext_create_xrcompatible.https.html:		      return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/webGLCanvasContext_makecompatible_contextlost.https.html:		      return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/webGLCanvasContext_makecompatible_reentrant.https.html:		  return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/webGLCanvasContext_makecompatible_reentrant.https.html:		  return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/webxr_permissions_policy.https.html:		  return navigator.xr.isSessionSupported("inline").then((supported) => {
webxr/webxr_permissions_policy.https.html:		      navigator.xr.isSessionSupported("immersive-vr"),
webxr/webxr_permissions_policy.https.html:		  return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/webxr_permissions_policy.https.html:		      navigator.xr.test.simulateUserActivation(() => {
webxr/webxr_permissions_policy.https.html:		          navigator.xr.requestSession("inline").then(session => session.end()),
webxr/webxr_permissions_policy.https.html:		            navigator.xr.requestSession("inline", { requiredFeatures: ["local"] }),
webxr/webxr_permissions_policy.https.html:		            navigator.xr.requestSession("immersive-vr"),
webxr/webxr_permissions_policy.https.html:		  navigator.xr.addEventListener("devicechange", () => {
webxr/webxr_permissions_policy.https.html:		    navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/xrDevice_disconnect_ends.https.html:		      let xrWatcher = new EventWatcher(t, navigator.xr, ["devicechange"]);
webxr/xrDevice_isSessionSupported_immersive.https.html:		        return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/xrDevice_isSessionSupported_immersive.https.html:		            return navigator.xr.isSessionSupported('immersive-vr').then((supported) => {
webxr/xrDevice_isSessionSupported_immersive_unsupported.https.html:		      return navigator.xr.test.simulateDeviceConnection(VALID_NON_IMMERSIVE_DEVICE)
webxr/xrDevice_isSessionSupported_immersive_unsupported.https.html:		          return navigator.xr.isSessionSupported('immersive-vr').then((supported) => {
webxr/xrDevice_isSessionSupported_inline.https.html:		      return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/xrDevice_isSessionSupported_inline.https.html:		          return navigator.xr.isSessionSupported('inline').then((supported) => {
webxr/xrDevice_requestSession_immersive_no_gesture.https.html:		        return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/xrDevice_requestSession_immersive_no_gesture.https.html:		            t, 'SecurityError', navigator.xr.requestSession('immersive-vr')));
webxr/xrDevice_requestSession_immersive_unsupported.https.html:		        return navigator.xr.test.simulateDeviceConnection(VALID_NON_IMMERSIVE_DEVICE)
webxr/xrDevice_requestSession_immersive_unsupported.https.html:		            navigator.xr.test.simulateUserActivation( () => {
webxr/xrDevice_requestSession_immersive_unsupported.https.html:		                navigator.xr.requestSession('immersive-vr')
webxr/xrDevice_requestSession_no_mode.https.html:		        return navigator.xr.test.simulateDeviceConnection(VALID_NON_IMMERSIVE_DEVICE)
webxr/xrDevice_requestSession_no_mode.https.html:		            navigator.xr.test.simulateUserActivation( () => {
webxr/xrDevice_requestSession_no_mode.https.html:		                assert_throws_js(TypeError, () => navigator.xr.requestSession())
webxr/xrDevice_requestSession_non_immersive_no_gesture.https.html:		        return navigator.xr.test.simulateDeviceConnection(VALID_NON_IMMERSIVE_DEVICE)
webxr/xrDevice_requestSession_non_immersive_no_gesture.https.html:		          .then( (controller) => navigator.xr.requestSession('inline'))
webxr/xrDevice_requestSession_requiredFeatures_unknown.https.html:		        return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/xrDevice_requestSession_requiredFeatures_unknown.https.html:		            navigator.xr.test.simulateUserActivation( () => {
webxr/xrDevice_requestSession_requiredFeatures_unknown.https.html:		                navigator.xr.requestSession('immersive-vr',
webxr/xrDevice_requestSession_requiredFeatures_unknown.https.html:		                  navigator.xr.requestSession('immersive-vr',
webxr/xrSession_features_deviceSupport.https.html:		      return navigator.xr.requestSession(sessionMode, sessionInit)
webxr/xrSession_features_deviceSupport.https.html:		    return navigator.xr.test.simulateDeviceConnection(fakeDeviceInitParams)
webxr/xrSession_features_deviceSupport.https.html:		            navigator.xr.requestSession("immersive-vr", {
webxr/xrSession_input_events_end.https.html:		    navigator.xr.test.simulateUserActivation(() => {
webxr/xrSession_input_events_end.https.html:		      navigator.xr.requestSession('immersive-vr').then((session) => {
webxr/xrSession_prevent_multiple_exclusive.https.html:		      return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/xrSession_prevent_multiple_exclusive.https.html:		          navigator.xr.test.simulateUserActivation( () => {
webxr/xrSession_prevent_multiple_exclusive.https.html:		            resolve(navigator.xr.requestSession('immersive-vr')
webxr/xrSession_prevent_multiple_exclusive.https.html:		                navigator.xr.test.simulateUserActivation( () => {
webxr/xrSession_prevent_multiple_exclusive.https.html:		                    navigator.xr.requestSession('immersive-vr')
webxr/xrSession_prevent_multiple_exclusive.https.html:		                        navigator.xr.test.simulateUserActivation( () => {
webxr/xrSession_prevent_multiple_exclusive.https.html:		                          resolve(navigator.xr.requestSession('immersive-vr'));
webxr/xrSession_requestSessionDuringEnd.https.html:		                  navigator.xr.requestSession("immersive-vr")
webxr/xrSession_requestSessionDuringEnd.https.html:		            navigator.xr.test.simulateUserActivation(() => {
webxr/xrSession_viewer_availability.https.html:		      return navigator.xr.requestSession(sessionMode, sessionInit)
webxr/xrSession_viewer_availability.https.html:		      return promise_rejects_dom(t, expected, navigator.xr.requestSession(sessionMode, sessionInit)
webxr/xrWebGLLayer_constructor.https.html:		  return navigator.xr.test.simulateDeviceConnection(TRACKED_IMMERSIVE_DEVICE)
webxr/xrWebGLLayer_constructor.https.html:		      return navigator.xr.requestSession('inline')
webxr/xrWebGLLayer_constructor.https.html:		        navigator.xr.test.simulateUserActivation(() => {
webxr/xrWebGLLayer_constructor.https.html:		          navigator.xr.requestSession('immersive-vr')
