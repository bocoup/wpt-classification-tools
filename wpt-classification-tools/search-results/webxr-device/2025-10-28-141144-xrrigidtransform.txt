resources/chromium/webxr-test-math-helper.js:		  // be compatible with FakeXRRigidTransformInit.
resources/chromium/webxr-test.js:		      // convert the FakeXRRigidTransformInit into a transformation matrix object.
webxr/anchors/ar_anchor_freefloating_create_move.https.html:		      frame.createAnchor(new XRRigidTransform(), localRefSpace)
webxr/anchors/ar_anchor_freefloating_delay_creation.https.html:		        frame.createAnchor(new XRRigidTransform(), localRefSpace)
webxr/anchors/ar_anchor_freefloating_failure.https.html:		      frame.createAnchor(new XRRigidTransform(), localRefSpace)
webxr/anchors/ar_anchor_freefloating_pause_resume_stop.https.html:		      frame.createAnchor(new XRRigidTransform(), localRefSpace)
webxr/anchors/ar_anchor_states.https.html:		          frame.createAnchor(new XRRigidTransform(), localRefSpace)
webxr/hit-test/xrRay_constructor.https.html:		      new XRRigidTransform(
webxr/idlharness.https.window.js:		      XRRigidTransform: ['new XRRigidTransform()'],
webxr/xrFrame_getPose.https.html:		      let offset = new XRRigidTransform(
webxr/xrFrame_getPose.https.html:		      space1 = space1.getOffsetReferenceSpace(new XRRigidTransform(
webxr/xrFrame_getPose.https.html:		      space2 = space2.getOffsetReferenceSpace(new XRRigidTransform(
webxr/xrFrame_getViewerPose_getPose.https.html:		    const offsetSpaceTransform = new XRRigidTransform(
webxr/xrFrame_getViewerPose_getPose_identities.https.html:		    const offsetSpaceTransform = new XRRigidTransform(
webxr/xrPose_transform_sameObject.https.html:		        // XRRigidTransform object each time the attribute is accessed.
webxr/xrReferenceSpace_originOffset.https.html:		        referenceSpace = referenceSpace.getOffsetReferenceSpace(new XRRigidTransform(new_position1, new_orientation1));
webxr/xrReferenceSpace_originOffset.https.html:		        referenceSpace = referenceSpace.getOffsetReferenceSpace(new XRRigidTransform(new_position2, new_orientation2));
webxr/xrReferenceSpace_originOffsetBounded.https.html:		        referenceSpace = referenceSpace.getOffsetReferenceSpace(new XRRigidTransform(new_position1, new_orientation1));
webxr/xrReferenceSpace_originOffsetBounded.https.html:		        referenceSpace = referenceSpace.getOffsetReferenceSpace(new XRRigidTransform(new_position2, new_orientation2));
webxr/xrReferenceSpace_originOffset_viewer.https.html:		          new XRRigidTransform(originOffsetPosition));
webxr/xrRigidTransform_constructor.https.html:		let testName = "XRRigidTransform constructor works";
webxr/xrRigidTransform_constructor.https.html:		  let transform = new XRRigidTransform(
webxr/xrRigidTransform_constructor.https.html:		  let identity = new XRRigidTransform();
webxr/xrRigidTransform_constructor.https.html:		  transform = new XRRigidTransform(createDOMPoint([1.0, 2.0, 3.0]));
webxr/xrRigidTransform_constructor.https.html:		  transform = new XRRigidTransform(undefined, createDOMPoint([1.1, 2.1, 3.1, 1.0]));
webxr/xrRigidTransform_constructor.https.html:		  transform = new XRRigidTransform(
webxr/xrRigidTransform_constructor.https.html:		  transform = new XRRigidTransform(
webxr/xrRigidTransform_constructor.https.html:		  assert_throws_js(TypeError, () => new XRRigidTransform(
webxr/xrRigidTransform_constructor.https.html:		assert_throws_js(TypeError, () => new XRRigidTransform(
webxr/xrRigidTransform_constructor.https.html:		assert_throws_js(TypeError, () => new XRRigidTransform(
webxr/xrRigidTransform_constructor.https.html:		assert_throws_js(TypeError, () => new XRRigidTransform(
webxr/xrRigidTransform_constructor.https.html:		assert_throws_js(TypeError, () => new XRRigidTransform(
webxr/xrRigidTransform_constructor.https.html:		assert_throws_js(TypeError, () => new XRRigidTransform(
webxr/xrRigidTransform_constructor.https.html:		assert_throws_js(TypeError, () => new XRRigidTransform(
webxr/xrRigidTransform_constructor.https.html:		  assert_throws_dom("InvalidStateError", () => new XRRigidTransform(
webxr/xrRigidTransform_constructor.https.html:		assert_throws_dom("InvalidStateError", () => new XRRigidTransform(
webxr/xrRigidTransform_inverse.https.html:		let testName = "XRRigidTransform inverse works";
webxr/xrRigidTransform_inverse.https.html:		  let identity_transform = new XRRigidTransform();
webxr/xrRigidTransform_inverse.https.html:		  let transform = new XRRigidTransform(
webxr/xrRigidTransform_inverse.https.html:		  let expected_inverse = new XRRigidTransform(
webxr/xrRigidTransform_inverse.https.html:		  transform = new XRRigidTransform(
webxr/xrRigidTransform_inverse.https.html:		  expected_inverse = new XRRigidTransform(
webxr/xrRigidTransform_inverse.https.html:		  transform = new XRRigidTransform(
webxr/xrRigidTransform_inverse.https.html:		  expected_inverse = new XRRigidTransform(
webxr/xrRigidTransform_inverse.https.html:		  transform = new XRRigidTransform(
webxr/xrRigidTransform_inverse.https.html:		  transform = new XRRigidTransform(
webxr/xrRigidTransform_inverse.https.html:		  transform = new XRRigidTransform(
webxr/xrRigidTransform_inverse.https.html:		  transform = new XRRigidTransform(
webxr/xrRigidTransform_inverse.https.html:		  transform = new XRRigidTransform(
webxr/xrRigidTransform_matrix.https.html:		let matrix_tests_name = "XRRigidTransform matrix works";
webxr/xrRigidTransform_matrix.https.html:		  // Matrix tests for XRRigidTransform.
webxr/xrRigidTransform_matrix.https.html:		    let rigidTransform = new XRRigidTransform(
webxr/xrRigidTransform_sameObject.https.html:		let testName = "XRRigidTransform position and orientation meet [SameObject] requirements";
webxr/xrRigidTransform_sameObject.https.html:		// xrRigidTransform_inverse.https.html already checks [SameObject] requirement
webxr/xrRigidTransform_sameObject.https.html:		// for XRRigidTransform.inverse. It's in a separate test because there are
webxr/xrRigidTransform_sameObject.https.html:		  let transform = new XRRigidTransform(
webxr/xrRigidTransform_sameObject.https.html:		      "XRRigidTransform.position returns the same object.");
webxr/xrRigidTransform_sameObject.https.html:		      "XRRigidTransform.orientation returns the same object.");
webxr/xrRigidTransform_sameObject.https.html:		      "XRRigidTransform.matrix returns the same object.");
