webxr/exclusive_requestFrame_nolayer.https.html:		  let webglLayer = new XRWebGLLayer(session, gl);
webxr/idlharness.https.window.js:		      XRWebGLLayer: ['xrWebGLLayer'],
webxr/idlharness.https.window.js:		    self.xrWebGLLayer = new XRWebGLLayer(self.xrSession, self.webGLRenderingContextBase);
webxr/layers/xrSession_updateRenderState.https.html:		      const baseLayer = new XRWebGLLayer(xrSession, gl);
webxr/layers/xrSession_updateRenderState.https.html:		        new XRWebGLLayer(xrSession, gl),
webxr/layers/xrSession_updateRenderState.https.html:		        new XRWebGLLayer(xrSession, gl),
webxr/layers/xrSession_updateRenderState.https.html:		        new XRWebGLLayer(xrSession, gl)
webxr/layers/xrSession_updateRenderState.https.html:		        new XRWebGLLayer(xrSession, gl),
webxr/layers/xrSession_updateRenderState.https.html:		        const otherSessionLayer = [ new XRWebGLLayer(otherSession, gl) ];
webxr/light-estimation/xrFrame_getLightEstimate_oldSession.https.html:		            let glLayer = new XRWebGLLayer(session2, sessionObjects.gl);
webxr/render_state_update.https.html:		          assert_throws_dom('InvalidStateError', () => session.updateRenderState({ baseLayer : new XRWebGLLayer(tempSession, sessionObjects.gl), }));
webxr/render_state_update.https.html:		          let layer = new XRWebGLLayer(session, gl);
webxr/render_state_update.https.html:		        let layer = new XRWebGLLayer(session, gl);
webxr/resources/webxr_util.js:		                        let glLayer = new XRWebGLLayer(session, sessionObjects.gl, gllayerProperties);
webxr/resources/webxr_util.js:		  callback(window.XRWebGLLayer, 'XRWebGLLayer');
webxr/resources/webxr_util.js:		  callback(window.XRWebGLLayerInit, 'XRWebGLLayerInit');
webxr/xrSession_input_events_end.https.html:		          baseLayer: new XRWebGLLayer(session, gl)
webxr/xrWebGLLayer_constructor.https.html:		            let webglLayerIncompatible = new XRWebGLLayer(session, gl);
webxr/xrWebGLLayer_constructor.https.html:		            assert_unreached("Inline XRWebGLLayers should not fail when created with a context that is not XRCompatible");
webxr/xrWebGLLayer_constructor.https.html:		                let webglLayerIncompatible = new XRWebGLLayer(xrSession, gl);
webxr/xrWebGLLayer_constructor.https.html:		                assert_unreached("XRWebGLLayer should fail when created with a context that is not XRCompatible")
webxr/xrWebGLLayer_constructor.https.html:		              let webglLayerGood = new XRWebGLLayer(xrSession, gl);
webxr/xrWebGLLayer_constructor.https.html:		              reject("XRWebGLLayer should not fail with valid arguments");
webxr/xrWebGLLayer_constructor.https.html:		                let webglLayerBadContext = new XRWebGLLayer(xrSession, gl);
webxr/xrWebGLLayer_constructor.https.html:		                reject("XRWebGLLayer should fail when created with a lost context");
webxr/xrWebGLLayer_constructor.https.html:		                  let webglLayerBadSession = new XRWebGLLayer(xrSession, gl);
webxr/xrWebGLLayer_constructor.https.html:		                  assert_unreached("XRWebGLLayer should fail when created with an ended session");
webxr/xrWebGLLayer_constructor.https.html:		xr_promise_test("Ensure that XRWebGLLayer's constructor throws appropriate errors using webgl",
webxr/xrWebGLLayer_constructor.https.html:		xr_promise_test("Ensure that XRWebGLLayer's constructor throws appropriate errors using webgl2",
webxr/xrWebGLLayer_framebuffer_sameObject.https.html:		let testName = "XRWebGLLayer.framebuffer meets [SameObject] requirement";
webxr/xrWebGLLayer_framebuffer_sameObject.https.html:		  let layer = new XRWebGLLayer(session, sessionObjects.gl, {});
webxr/xrWebGLLayer_framebuffer_sameObject.https.html:		      "XRWebGLLayer.framebuffer returns the same object.");
webxr/xrWebGLLayer_framebuffer_scale.https.html:		  let nativeScale = XRWebGLLayer.getNativeFramebufferScaleFactor(session);
webxr/xrWebGLLayer_framebuffer_scale.https.html:		  webglLayer = new XRWebGLLayer(session, gl, { framebufferScaleFactor: nativeScale });
webxr/xrWebGLLayer_framebuffer_scale.https.html:		  webglLayer = new XRWebGLLayer(session, gl, { framebufferScaleFactor: 0 });
webxr/xrWebGLLayer_framebuffer_scale.https.html:		  webglLayer = new XRWebGLLayer(session, gl, { framebufferScaleFactor: 100 });
webxr/xrWebGLLayer_viewports.https.html:		let immersiveTestName = "XRWebGLLayer reports a valid viewports for immersive sessions";
webxr/xrWebGLLayer_viewports.https.html:		let inlineTestName = "XRWebGLLayer reports a valid viewports for inline sessions";
