resources/chromium/webxr-test.js:		    const source = new MockXRInputSource(fakeInputSourceInit, index, this);
resources/chromium/webxr-test.js:		  // These methods are intended to be used by MockXRInputSource only.
resources/chromium/webxr-test.js:		class MockXRInputSource {
resources/chromium/webxr-test.js:		      throw new TypeError("FakeXRInputSourceInit.pointerOrigin is required.");
webxr/events_input_sources_change.https.html:		  // on an XRInputSourcesChangeEvent, as required by the spec.
webxr/events_input_sources_change.https.html:		        "XRInputSourcesChangeEvent.session returns the same object.");
webxr/events_input_sources_change.https.html:		        "XRInputSourcesChangeEvent.added returns the same object.");
webxr/events_input_sources_change.https.html:		        "XRInputSourcesChangeEvent.removed returns the same object.");
webxr/events_session_select.https.html:		let testName = "XRInputSources primary input presses properly fires off the "
webxr/events_session_select.https.html:		  // on an XRInputSourceEvent, as required by the spec.
webxr/events_session_select.https.html:		        "XRInputSourceEvent.frame returns the same object.");
webxr/events_session_select.https.html:		        "XRInputSourceEvent.inputSource returns the same object.");
webxr/events_session_select_subframe.https.html:		let testName = "Ensures that an XRInputSources primary input being pressed and "
webxr/events_session_squeeze.https.html:		let testName = "XRInputSources primary input presses properly fires off the "
webxr/events_session_squeeze.https.html:		  // on an XRInputSourceEvent, as required by the spec.
webxr/events_session_squeeze.https.html:		        "XRInputSourceEvent.frame returns the same object.");
webxr/events_session_squeeze.https.html:		        "XRInputSourceEvent.inputSource returns the same object.");
webxr/gamepads-module/idlharness.https.window.js:		      // TODO: XRInputSource
webxr/getInputPose_handedness.https.html:		let testName = "XRInputSources properly communicate their handedness";
webxr/getInputPose_pointer.https.html:		let testName = "XRInputSources with a target ray mode of 'tracked-pointer' "
webxr/idlharness.https.window.js:		      // TODO: XRInputSource
webxr/idlharness.https.window.js:		      XRInputSourceArray: ['xrInputSourceArray'],
webxr/idlharness.https.window.js:		      // TODO: XRInputSourceEvent
webxr/idlharness.https.window.js:		      XRInputSourcesChangeEvent: ['xrInputSourcesChangeEvent'],
webxr/idlharness.https.window.js:		    self.xrInputSourceArray = self.xrSession.inputSources;
webxr/idlharness.https.window.js:		    self.xrInputSourcesChangeEvent = new XRInputSourcesChangeEvent('inputsourceschange', {
webxr/xrInputSource_add_remove.https.html:		let testName = "XRInputSources can be properly added and removed from the "
webxr/xrInputSource_emulatedPosition.https.html:		let testName = "Poses from XRInputSource.gripSpace have emulatedPosition set "
webxr/xrInputSource_sameObject.https.html:		let testName = "XRInputSource attributes meet [SameObject] requirement";
webxr/xrInputSource_sameObject.https.html:		          "XRInputSource.targetRaySpace returns the same object.");
webxr/xrInputSource_sameObject.https.html:		          "XRInputSource.gripSpace returns the same object.");
webxr/xrInputSource_sameObject.https.html:		          "XRInputSource.profiles returns the same object.");
webxr/xrInputSource_sameObject.https.html:		            "XRInputSource.targetRaySpace returns the same object each frame.");
webxr/xrInputSource_sameObject.https.html:		            "XRInputSource.gripSpace returns the same object each frame.");
webxr/xrInputSource_sameObject.https.html:		            "XRInputSource.profiles returns the same object each frame.");
webxr/xrSession_sameObject.https.html:		        // XRInputSourceArray object on XRSession to be re-created.
